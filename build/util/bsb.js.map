{"version":3,"sources":["bsb.js"],"names":["cp","_resolveOnInitialize","resolve","execa","stdout","pipe","split","stderr","bsbChildProcess","spawnBsbWatcherAsync","stream","require","Writable","_write","data","encoding","next","toString","includes","withTimestamp"],"mappings":";;;;;;;;;;;;;;;;;;;;sFA8BO;AAAA;AAAA;AAAA;AAAA;AAAA;AACDA,cADC;AAAA;AAAA,mBAEC,sBAAY,mBAAW;AAC3BC,qCAAuBC,OAAvB;;AAEAF,mBAAKG,MACH,KADG,EAEH,CAAC,aAAD,EAAgB,cAAhB,EAAgC,IAAhC,CAFG,EAGH,CAAC,MAAD,EAAS,MAAT,EAAiB,IAAjB,CAHG,CAAL;;AAMAH,iBAAGI,MAAH,CAAUC,IAAV,CAAeC,OAAf,EAAwBD,IAAxB,CAA6BD,MAA7B;AACAJ,iBAAGO,MAAH,CAAUF,IAAV,CAAeC,OAAf,EAAwBD,IAAxB,CAA6BE,MAA7B;AACD,aAXK,CAFD;;AAAA;AAAA,6CAeE,EAAEC,iBAAiBR,EAAnB,EAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeS,oB;;;;;AAxBtB;;;;;;AANA,IAAMC,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMR,QAAQQ,QAAQ,OAAR,CAAd;AACA,IAAMC,WAAWD,QAAQ,QAAR,EAAkBC,QAAnC;AACA,IAAMN,QAAQK,QAAQ,OAAR,CAAd;AACA,IAAMP,SAAS,IAAIQ,QAAJ,EAAf;AACA,IAAML,SAAS,IAAIK,QAAJ,EAAf;;;AAGA,IAAIX,6BAAJ;;AAEAG,OAAOS,MAAP,GAAgB,UAACC,IAAD,EAAOC,QAAP,EAAiBC,IAAjB,EAA0B;AACxC,MAAIF,KAAKG,QAAL,GAAgBC,QAAhB,CAAyB,oBAAzB,CAAJ,EAAoD;AAClD,QAAIjB,oBAAJ,EAA0B;AACxBA;AACAA,6BAAuB,IAAvB;AACD;AACF;AACD,gBAAIkB,aAAJ,YAA2BL,KAAKG,QAAL,EAA3B;AACAD;AACD,CATD;;AAWAT,OAAOM,MAAP,GAAgB,UAACC,IAAD,EAAOC,QAAP,EAAiBC,IAAjB,EAA0B;AACxC,MAAIF,KAAKG,QAAL,GAAgBC,QAAhB,CAAyB,uBAAzB,CAAJ,EAAuD;AACrDF;AACD,GAFD,MAEO;AACL,kBAAIG,aAAJ,YAA2BL,KAAKG,QAAL,EAA3B;AACAD;AACD;AACF,CAPD","file":"bsb.js","sourcesContent":["const stream = require('stream');\nconst execa = require('execa');\nconst Writable = require('stream').Writable;\nconst split = require('split');\nconst stdout = new Writable();\nconst stderr = new Writable();\nimport log from './log';\n\nlet _resolveOnInitialize;\n\nstdout._write = (data, encoding, next) => {\n  if (data.toString().includes('> Finish compiling')) {\n    if (_resolveOnInitialize) {\n      _resolveOnInitialize();\n      _resolveOnInitialize = null;\n    }\n  }\n  log.withTimestamp(`[bsb] ${data.toString()}`);\n  next();\n};\n\nstderr._write = (data, encoding, next) => {\n  if (data.toString().includes('refmt version missing')) {\n    next();\n  } else {\n    log.withTimestamp(`[bsb] ${data.toString()}`);\n    next();\n  }\n};\n\nexport async function spawnBsbWatcherAsync() {\n  let cp;\n  await new Promise(resolve => {\n    _resolveOnInitialize = resolve;\n\n    cp = execa(\n      'bsb',\n      ['-make-world', '-clean-world', '-w'],\n      ['pipe', 'pipe', null]\n    );\n\n    cp.stdout.pipe(split()).pipe(stdout);\n    cp.stderr.pipe(split()).pipe(stderr);\n  });\n\n  return { bsbChildProcess: cp };\n}\n"]}