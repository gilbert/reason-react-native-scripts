{"version":3,"sources":["init.js"],"names":["DEFAULT_DEPENDENCIES","expo","react","DEFAULT_DEV_DEPENDENCIES","module","exports","appPath","appName","verbose","cwd","ownPackageName","require","name","ownPath","join","useYarn","npmOrYarn","npmVersion","sync","stdout","toString","trim","match","console","log","yellow","process","exit","readmeExists","rename","appPackagePath","JSON","readFile","appPackage","parse","main","scripts","start","eject","android","ios","test","dependencies","devDependencies","writeFile","copy","code","data","appendFile","unlink","command","args","error","cdpath","resolve","cyan"],"mappings":"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","file":"init.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport path from 'path';\nimport pathExists from 'path-exists';\nimport spawn from 'cross-spawn';\nimport log from '../util/log';\nimport install from '../util/install';\n\n// UPDATE DEPENDENCY VERSIONS HERE\nconst DEFAULT_DEPENDENCIES = {\n  expo: '^25.0.0',\n  react: '16.2.0',\n  'react-native': '0.52.0',\n  'bs-platform': '^2.1.0',\n  'bs-react-native': '~0.5.0',\n  'reason-react': '~0.3.0',\n};\n\n// TODO figure out how this interacts with ejection\nconst DEFAULT_DEV_DEPENDENCIES = {\n};\n\nmodule.exports = async (\n  appPath: string,\n  appName: string,\n  verbose: boolean,\n  cwd: string = ''\n) => {\n  const ownPackageName: string = require('../../package.json').name;\n  const ownPath: string = path.join(appPath, 'node_modules', ownPackageName);\n  const useYarn: boolean = await pathExists(path.join(appPath, 'yarn.lock'));\n  const npmOrYarn = useYarn ? 'yarn' : 'npm';\n\n  // FIXME(perry) remove when npm 5 is supported\n  if (!useYarn) {\n    let npmVersion = spawn\n      .sync('npm', ['--version'])\n      .stdout.toString()\n      .trim();\n\n    if (npmVersion.match(/\\d+/)[0] === '5') {\n      console.log(\n        chalk.yellow(\n          `\n*******************************************************************************\nERROR: npm 5 is not supported yet\n*******************************************************************************\n\nIt looks like you're using npm 5 which was recently released.\n\nCreate React Native App doesn't work with npm 5 yet, unfortunately. We\nrecommend using npm 4 or yarn until some bugs are resolved.\n\nYou can follow the known issues with npm 5 at:\nhttps://github.com/npm/npm/issues/16991\n\n*******************************************************************************\n `\n        )\n      );\n      process.exit(1);\n    }\n  }\n\n  const readmeExists: boolean = await pathExists(\n    path.join(appPath, 'README.md')\n  );\n  if (readmeExists) {\n    await fse.rename(\n      path.join(appPath, 'README.md'),\n      path.join(appPath, 'README.old.md')\n    );\n  }\n\n  const appPackagePath: string = path.join(appPath, 'package.json');\n  const appPackage = JSON.parse(await fse.readFile(appPackagePath));\n\n  // mutate the default package.json in any ways we need to\n  appPackage.main =\n    './node_modules/reason-react-native-scripts/build/bin/crna-entry.js';\n  appPackage.scripts = {\n    start: 'react-native-scripts start',\n    eject: 'react-native-scripts eject',\n    android: 'react-native-scripts android',\n    ios: 'react-native-scripts ios',\n    test: 'node node_modules/jest/bin/jest.js --watch',\n  };\n\n  // TODO figure out integration with jest\n  // appPackage.jest = {\n  //   preset: 'jest-expo',\n  // };\n\n  if (!appPackage.dependencies) {\n    appPackage.dependencies = {};\n  }\n\n  if (!appPackage.devDependencies) {\n    appPackage.devDependencies = {};\n  }\n\n  // react-native-scripts is already in the package.json devDependencies\n  // so we need to merge instead of assigning\n  Object.assign(appPackage.dependencies, DEFAULT_DEPENDENCIES);\n\n  // TODO figure out integration with jest\n  // Object.assign(appPackage.devDependencies, DEFAULT_DEV_DEPENDENCIES);\n\n  // Write the new appPackage after copying so that we can include any existing\n  await fse.writeFile(appPackagePath, JSON.stringify(appPackage, null, 2));\n\n  // Copy the files for the user\n  await fse.copy(path.join(ownPath, 'template'), appPath);\n\n  // Rename gitignore after the fact to prevent npm from renaming it to .npmignore\n  try {\n    await fse.rename(\n      path.join(appPath, 'gitignore'),\n      path.join(appPath, '.gitignore')\n    );\n  } catch (err) {\n    // Append if there's already a `.gitignore` file there\n    if (err.code === 'EEXIST') {\n      const data = await fse.readFile(path.join(appPath, 'gitignore'));\n      await fse.appendFile(path.join(appPath, '.gitignore'), data);\n      await fse.unlink(path.join(appPath, 'gitignore'));\n    } else {\n      throw err;\n    }\n  }\n  const { code, command, args } = await install(appPath);\n  if (code !== 0) {\n    console.error('Failed to install');\n    // console.error(`\\`${command} ${args.join(' ')}\\` failed`);\n    return;\n  }\n\n  // display the cleanest way to get to the app dir\n  // if the cwd + appName is equal to the full path, then just cd into appName\n  let cdpath;\n  if (path.resolve(cwd, appName) === appPath) {\n    cdpath = appName;\n  } else {\n    cdpath = appPath;\n  }\n\n  log(\n    `\n\nSuccess! Created ${appName} at ${appPath}\nInside that directory, you can run several commands:\n\n  ${chalk.cyan(npmOrYarn + ' start')}\n    Starts the development server so you can open your app in the Expo\n    app on your phone.\n\n  ${chalk.cyan(npmOrYarn + ' run ios')}\n    (Mac only, requires Xcode)\n    Starts the development server and loads your app in an iOS simulator.\n\n  ${chalk.cyan(npmOrYarn + ' run android')}\n    (Requires Android build tools)\n    Starts the development server and loads your app on a connected Android\n    device or emulator.\n\n  ${chalk.cyan(npmOrYarn + ' test')}\n    Starts the test runner.\n\n  ${chalk.cyan(npmOrYarn + ' run eject')}\n    Removes this tool and copies build dependencies, configuration files\n    and scripts into the app directory. If you do this, you canâ€™t go back!\n\nWe suggest that you begin by typing:\n\n  ${chalk.cyan('cd ' + cdpath)}\n  ${chalk.cyan(npmOrYarn + ' start')}`\n  );\n\n  if (readmeExists) {\n    log(\n      `\n${chalk.yellow('You had a `README.md` file, we renamed it to `README.old.md`')}`\n    );\n  }\n\n  log();\n  log('Happy hacking!');\n};\n"]}